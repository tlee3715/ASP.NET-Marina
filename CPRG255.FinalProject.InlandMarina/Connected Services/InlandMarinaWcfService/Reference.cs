//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CPRG255.FinalProject.InlandMarina.InlandMarinaWcfService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InlandMarinaWcfService.IMarinaService")]
    public interface IMarinaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddAuthorize", ReplyAction="http://tempuri.org/IMarinaService/AddAuthorizeResponse")]
        string AddAuthorize(string username, string password, int CustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddAuthorize", ReplyAction="http://tempuri.org/IMarinaService/AddAuthorizeResponse")]
        System.Threading.Tasks.Task<string> AddAuthorizeAsync(string username, string password, int CustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/UpdateAuthorize", ReplyAction="http://tempuri.org/IMarinaService/UpdateAuthorizeResponse")]
        string UpdateAuthorize(string username, string password, int CustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/UpdateAuthorize", ReplyAction="http://tempuri.org/IMarinaService/UpdateAuthorizeResponse")]
        System.Threading.Tasks.Task<string> UpdateAuthorizeAsync(string username, string password, int CustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddBoat", ReplyAction="http://tempuri.org/IMarinaService/AddBoatResponse")]
        string AddBoat(string registerNumber, string manufacturer, int modelYear, int length, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddBoat", ReplyAction="http://tempuri.org/IMarinaService/AddBoatResponse")]
        System.Threading.Tasks.Task<string> AddBoatAsync(string registerNumber, string manufacturer, int modelYear, int length, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/UpdateBoat", ReplyAction="http://tempuri.org/IMarinaService/UpdateBoatResponse")]
        string UpdateBoat(int ID, string RegistrationNumber, string Manufacturer, int ModelYear, int Length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/UpdateBoat", ReplyAction="http://tempuri.org/IMarinaService/UpdateBoatResponse")]
        System.Threading.Tasks.Task<string> UpdateBoatAsync(int ID, string RegistrationNumber, string Manufacturer, int ModelYear, int Length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetBoatsByCustomerId", ReplyAction="http://tempuri.org/IMarinaService/GetBoatsByCustomerIdResponse")]
        CPRG255.FinalProject.Domain.Boat[] GetBoatsByCustomerId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetBoatsByCustomerId", ReplyAction="http://tempuri.org/IMarinaService/GetBoatsByCustomerIdResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Boat[]> GetBoatsByCustomerIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAllBoats", ReplyAction="http://tempuri.org/IMarinaService/GetAllBoatsResponse")]
        CPRG255.FinalProject.Domain.Boat[] GetAllBoats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAllBoats", ReplyAction="http://tempuri.org/IMarinaService/GetAllBoatsResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Boat[]> GetAllBoatsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetBoatById", ReplyAction="http://tempuri.org/IMarinaService/GetBoatByIdResponse")]
        CPRG255.FinalProject.Domain.Boat GetBoatById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetBoatById", ReplyAction="http://tempuri.org/IMarinaService/GetBoatByIdResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Boat> GetBoatByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/Authenticate", ReplyAction="http://tempuri.org/IMarinaService/AuthenticateResponse")]
        CPRG255.FinalProject.Domain.Customer Authenticate(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/Authenticate", ReplyAction="http://tempuri.org/IMarinaService/AuthenticateResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Customer> AuthenticateAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAllCustomers", ReplyAction="http://tempuri.org/IMarinaService/GetAllCustomersResponse")]
        CPRG255.FinalProject.Domain.Customer[] GetAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAllCustomers", ReplyAction="http://tempuri.org/IMarinaService/GetAllCustomersResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Customer[]> GetAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/UpdateCustomer", ReplyAction="http://tempuri.org/IMarinaService/UpdateCustomerResponse")]
        string UpdateCustomer(int ID, string FirstName, string LastName, string Phone, string City);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/UpdateCustomer", ReplyAction="http://tempuri.org/IMarinaService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<string> UpdateCustomerAsync(int ID, string FirstName, string LastName, string Phone, string City);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddCustomer", ReplyAction="http://tempuri.org/IMarinaService/AddCustomerResponse")]
        string AddCustomer(string FirstName, string LastName, string Phone, string City);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddCustomer", ReplyAction="http://tempuri.org/IMarinaService/AddCustomerResponse")]
        System.Threading.Tasks.Task<string> AddCustomerAsync(string FirstName, string LastName, string Phone, string City);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetCustomerRecordById", ReplyAction="http://tempuri.org/IMarinaService/GetCustomerRecordByIdResponse")]
        CPRG255.FinalProject.Domain.Customer GetCustomerRecordById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetCustomerRecordById", ReplyAction="http://tempuri.org/IMarinaService/GetCustomerRecordByIdResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Customer> GetCustomerRecordByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetDocks", ReplyAction="http://tempuri.org/IMarinaService/GetDocksResponse")]
        CPRG255.FinalProject.Domain.Dock[] GetDocks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetDocks", ReplyAction="http://tempuri.org/IMarinaService/GetDocksResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Dock[]> GetDocksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetDocksByLocationId", ReplyAction="http://tempuri.org/IMarinaService/GetDocksByLocationIdResponse")]
        CPRG255.FinalProject.Domain.Dock[] GetDocksByLocationId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetDocksByLocationId", ReplyAction="http://tempuri.org/IMarinaService/GetDocksByLocationIdResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Dock[]> GetDocksByLocationIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddLease", ReplyAction="http://tempuri.org/IMarinaService/AddLeaseResponse")]
        string AddLease(System.DateTime startDate, System.DateTime endDate, int slipID, int customerID, int leaseTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/AddLease", ReplyAction="http://tempuri.org/IMarinaService/AddLeaseResponse")]
        System.Threading.Tasks.Task<string> AddLeaseAsync(System.DateTime startDate, System.DateTime endDate, int slipID, int customerID, int leaseTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetLeaseTypes", ReplyAction="http://tempuri.org/IMarinaService/GetLeaseTypesResponse")]
        CPRG255.FinalProject.Domain.LeaseType[] GetLeaseTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetLeaseTypes", ReplyAction="http://tempuri.org/IMarinaService/GetLeaseTypesResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.LeaseType[]> GetLeaseTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetLocations", ReplyAction="http://tempuri.org/IMarinaService/GetLocationsResponse")]
        CPRG255.FinalProject.Domain.Location[] GetLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetLocations", ReplyAction="http://tempuri.org/IMarinaService/GetLocationsResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Location[]> GetLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAvailableSlipsByDockId", ReplyAction="http://tempuri.org/IMarinaService/GetAvailableSlipsByDockIdResponse")]
        CPRG255.FinalProject.Domain.Slip[] GetAvailableSlipsByDockId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAvailableSlipsByDockId", ReplyAction="http://tempuri.org/IMarinaService/GetAvailableSlipsByDockIdResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Slip[]> GetAvailableSlipsByDockIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAllSlips", ReplyAction="http://tempuri.org/IMarinaService/GetAllSlipsResponse")]
        CPRG255.FinalProject.Domain.Slip[] GetAllSlips();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarinaService/GetAllSlips", ReplyAction="http://tempuri.org/IMarinaService/GetAllSlipsResponse")]
        System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Slip[]> GetAllSlipsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarinaServiceChannel : CPRG255.FinalProject.InlandMarina.InlandMarinaWcfService.IMarinaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarinaServiceClient : System.ServiceModel.ClientBase<CPRG255.FinalProject.InlandMarina.InlandMarinaWcfService.IMarinaService>, CPRG255.FinalProject.InlandMarina.InlandMarinaWcfService.IMarinaService {
        
        public MarinaServiceClient() {
        }
        
        public MarinaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MarinaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarinaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarinaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddAuthorize(string username, string password, int CustomerID) {
            return base.Channel.AddAuthorize(username, password, CustomerID);
        }
        
        public System.Threading.Tasks.Task<string> AddAuthorizeAsync(string username, string password, int CustomerID) {
            return base.Channel.AddAuthorizeAsync(username, password, CustomerID);
        }
        
        public string UpdateAuthorize(string username, string password, int CustomerID) {
            return base.Channel.UpdateAuthorize(username, password, CustomerID);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAuthorizeAsync(string username, string password, int CustomerID) {
            return base.Channel.UpdateAuthorizeAsync(username, password, CustomerID);
        }
        
        public string AddBoat(string registerNumber, string manufacturer, int modelYear, int length, int customerID) {
            return base.Channel.AddBoat(registerNumber, manufacturer, modelYear, length, customerID);
        }
        
        public System.Threading.Tasks.Task<string> AddBoatAsync(string registerNumber, string manufacturer, int modelYear, int length, int customerID) {
            return base.Channel.AddBoatAsync(registerNumber, manufacturer, modelYear, length, customerID);
        }
        
        public string UpdateBoat(int ID, string RegistrationNumber, string Manufacturer, int ModelYear, int Length) {
            return base.Channel.UpdateBoat(ID, RegistrationNumber, Manufacturer, ModelYear, Length);
        }
        
        public System.Threading.Tasks.Task<string> UpdateBoatAsync(int ID, string RegistrationNumber, string Manufacturer, int ModelYear, int Length) {
            return base.Channel.UpdateBoatAsync(ID, RegistrationNumber, Manufacturer, ModelYear, Length);
        }
        
        public CPRG255.FinalProject.Domain.Boat[] GetBoatsByCustomerId(int id) {
            return base.Channel.GetBoatsByCustomerId(id);
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Boat[]> GetBoatsByCustomerIdAsync(int id) {
            return base.Channel.GetBoatsByCustomerIdAsync(id);
        }
        
        public CPRG255.FinalProject.Domain.Boat[] GetAllBoats() {
            return base.Channel.GetAllBoats();
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Boat[]> GetAllBoatsAsync() {
            return base.Channel.GetAllBoatsAsync();
        }
        
        public CPRG255.FinalProject.Domain.Boat GetBoatById(int id) {
            return base.Channel.GetBoatById(id);
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Boat> GetBoatByIdAsync(int id) {
            return base.Channel.GetBoatByIdAsync(id);
        }
        
        public CPRG255.FinalProject.Domain.Customer Authenticate(string username, string password) {
            return base.Channel.Authenticate(username, password);
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Customer> AuthenticateAsync(string username, string password) {
            return base.Channel.AuthenticateAsync(username, password);
        }
        
        public CPRG255.FinalProject.Domain.Customer[] GetAllCustomers() {
            return base.Channel.GetAllCustomers();
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Customer[]> GetAllCustomersAsync() {
            return base.Channel.GetAllCustomersAsync();
        }
        
        public string UpdateCustomer(int ID, string FirstName, string LastName, string Phone, string City) {
            return base.Channel.UpdateCustomer(ID, FirstName, LastName, Phone, City);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCustomerAsync(int ID, string FirstName, string LastName, string Phone, string City) {
            return base.Channel.UpdateCustomerAsync(ID, FirstName, LastName, Phone, City);
        }
        
        public string AddCustomer(string FirstName, string LastName, string Phone, string City) {
            return base.Channel.AddCustomer(FirstName, LastName, Phone, City);
        }
        
        public System.Threading.Tasks.Task<string> AddCustomerAsync(string FirstName, string LastName, string Phone, string City) {
            return base.Channel.AddCustomerAsync(FirstName, LastName, Phone, City);
        }
        
        public CPRG255.FinalProject.Domain.Customer GetCustomerRecordById(int id) {
            return base.Channel.GetCustomerRecordById(id);
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Customer> GetCustomerRecordByIdAsync(int id) {
            return base.Channel.GetCustomerRecordByIdAsync(id);
        }
        
        public CPRG255.FinalProject.Domain.Dock[] GetDocks() {
            return base.Channel.GetDocks();
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Dock[]> GetDocksAsync() {
            return base.Channel.GetDocksAsync();
        }
        
        public CPRG255.FinalProject.Domain.Dock[] GetDocksByLocationId(int id) {
            return base.Channel.GetDocksByLocationId(id);
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Dock[]> GetDocksByLocationIdAsync(int id) {
            return base.Channel.GetDocksByLocationIdAsync(id);
        }
        
        public string AddLease(System.DateTime startDate, System.DateTime endDate, int slipID, int customerID, int leaseTypeID) {
            return base.Channel.AddLease(startDate, endDate, slipID, customerID, leaseTypeID);
        }
        
        public System.Threading.Tasks.Task<string> AddLeaseAsync(System.DateTime startDate, System.DateTime endDate, int slipID, int customerID, int leaseTypeID) {
            return base.Channel.AddLeaseAsync(startDate, endDate, slipID, customerID, leaseTypeID);
        }
        
        public CPRG255.FinalProject.Domain.LeaseType[] GetLeaseTypes() {
            return base.Channel.GetLeaseTypes();
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.LeaseType[]> GetLeaseTypesAsync() {
            return base.Channel.GetLeaseTypesAsync();
        }
        
        public CPRG255.FinalProject.Domain.Location[] GetLocations() {
            return base.Channel.GetLocations();
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Location[]> GetLocationsAsync() {
            return base.Channel.GetLocationsAsync();
        }
        
        public CPRG255.FinalProject.Domain.Slip[] GetAvailableSlipsByDockId(int id) {
            return base.Channel.GetAvailableSlipsByDockId(id);
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Slip[]> GetAvailableSlipsByDockIdAsync(int id) {
            return base.Channel.GetAvailableSlipsByDockIdAsync(id);
        }
        
        public CPRG255.FinalProject.Domain.Slip[] GetAllSlips() {
            return base.Channel.GetAllSlips();
        }
        
        public System.Threading.Tasks.Task<CPRG255.FinalProject.Domain.Slip[]> GetAllSlipsAsync() {
            return base.Channel.GetAllSlipsAsync();
        }
    }
}
